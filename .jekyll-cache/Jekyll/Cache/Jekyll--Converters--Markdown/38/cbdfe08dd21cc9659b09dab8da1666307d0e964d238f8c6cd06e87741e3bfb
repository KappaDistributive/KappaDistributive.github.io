I"e<p>For the last 5 years or so, I’ve been lurking on the <a href="https://codegolf.stackexchange.com/">Code Golf Stackexchange</a>. Code Golf is the art of solving a given problem, under specified rules, with as little written code as possible. And if you have never encountered ‘golfed code’, I highly recommend taking a look. Not sure about other people but to my nerdy brain, reading the ingenious approaches these incredibly talented and passionate coders come up with, is pure entertainment gold!</p>

<p>For various reasons, I’ve never gotten into the hobby myself – until last week. While walking my dog, I thought about <a href="https://www.newscientist.com/article/2205779-creating-an-ai-can-be-five-times-worse-for-the-planet-than-a-car/">this article on the carbon footprint of machine learning</a> and it occurred to me that the neural networks I’ve designed and trained are super wasteful in terms of their parameter efficiency – basically the number of free variables during training to adapt them to a given task. So, I thought to myself, what would happen if I added parameter efficiency as an additional metric?</p>

<h1 id="machine-learning-golf">Machine Learning Golf</h1>

<p>Here’s the elevator pitch for ML Golf: The challenger provides</p>

<ul>
  <li>a public training set,</li>
  <li>a performance goal that needs to be met on the (unmodified!) training set,</li>
  <li>[additional, optional performance goals for bragging rights],</li>
  <li>a set of rules that all entries must satisfy and</li>
  <li>a scoring system to judge the entries by.</li>
</ul>

<p>For logistics and visibility reasons, I suggest posting any such challenge on https://codegolf.stackexchange.com/ under the tag ‘machine-learning’, once that tag exists. <sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup></p>

<p>Challengers then design and train their models according to the stated rules. Once their model meets the mandatory performance goal, they may submit their model (in a suitable form) and all code necessary to verify their results. As per usual in Code Golf, peers will then vote/comment on their and other submissions, suggest improvements and challengers may update their entries at any point and are free to enter multiple models.</p>

<h1 id="whats-the-point">What’s the point?</h1>

<p>The initial motivation of ML Golf was to find out how to design machine learning models that are much more parameter efficient. However, I don’t think that this is the most convincing or even relevant argument for you to consider participating.</p>

<p>Instead, the motivation for ML Golf is pretty much the same as for any other programming competition: My initial trial runs of ML Golfs proved to be highly entertaining, got me thinking about aspects of machine learning I previously hadn’t considered, encourage out-of-the-box thinking and, should the community decide to participate in them, spark the spirited exchange with like-minded people in a casual and safe environment.</p>

<h1 id="the-first-challenge">The First Challenge</h1>

<p>To kick things off, I’ll propose the first, very simple challenge.</p>

<p>In the language and framework of your choice, design and train a neural network that, given <script type="math/tex">(x_1, x_2)</script> calculates their product <script type="math/tex">x_1 \cdot x_2</script> for all integers <script type="math/tex">x_1, x_2</script> between (and including) <script type="math/tex">-10</script> and <script type="math/tex">10</script>.</p>

<h2 id="performance-goal">Performance Goal</h2>

<p>To qualify, your model may not deviate by more than <script type="math/tex">0.5</script> from the correct result on any of those entries.</p>

<h2 id="bonus-goal">Bonus Goal</h2>

<p>Achieve a maximal deviation (measured by the Euclidean norm) of <script type="math/tex">0.5</script> for the multiplication of all complex numbers with integer components <script type="math/tex">c_1 = (a_1, b_1) = a_1 + b_1 \cdot i, c_2 = (a_2, b_2) = a_2 + b_2 \cdot i</script> of Euclidean norm <script type="math/tex">\le 10</script>.</p>

<h2 id="rules">Rules</h2>

<p>Your model</p>

<ul>
  <li>must be a ‘traditional’ neural network (a node’s value is calculated as a weighted linear combination of some of the nodes in a previous layer followed by an activation function),</li>
  <li>may only use activation functions listed as such <a href="https://keras.io/activations/">in Keras</a>,</li>
  <li>must take <script type="math/tex">(x_1, x_2)</script> either as a tuple/vector/list/… of integers or floats as its only input,</li>
  <li>return the answer <script type="math/tex">\hat{y}</script> as an integer, float (or a suitable container, e.g. a vector or list, that contains this answer).</li>
</ul>

<h2 id="scoring">Scoring</h2>

<p>The neural network with the <em>smallest number of weights</em> (including bias weights) wins.</p>

<p>My best attempt so far uses 43 weights and achieves a maximal deviation of <script type="math/tex">0.04786</script> as witnessed by <script type="math/tex">8 \cdot -8 \mapsto -63.521423</script>. I’m sure there’s plenty of room for improvements and am looking forward to your entries!</p>

<p>If you want to participate or check out my submission, hop over to <a href="https://codegolf.stackexchange.com/questions/187562/machine-learning-golf-multiplication">this challenge on Code Golf Stackexchange</a>.</p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>This, of course, doesn’t mean that ML Golf is limited to this platform – feel free to post your challenges and submissions wherever you want. <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
:ET